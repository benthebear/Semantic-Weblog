<?php
// $Id$

/* Author: Benjamin Birkenhake <benjamin@birkenhake.org>*/

/**
* @file:
* A more or less small Module to create simple Ontologies, Topic Maps with Drupal while blogging.
*
* @author Benjamin Birkenhake <benjamin@birkenhake.org>
* @package semanticweblog
* @copyright creative commons by-sa
*
* @todo Add Versions
* @todo Add function semanticweblog_nodes_linking_to_me
* @todo Add .po file for German.
* @todo Make sure all Strings from the module are using t().
* @todo Make the Output on the taxonomy/term pages configurable via Admins settings.
* @todo Add advanced search to the association admin
* @todo Add functions and pages for massediting of associations
* @todo Add functions for adding association from within the register
* @todo Add Associations to Term-Pages
* @todo Add API to request association information inside Themes and other Modules
* @todo Add warning, when no Lexicon Vocabulary has been choosen
* @todo Add helptext
* @todo Improve Term Description use.
* @todo Add local Task 'url aliases' for Terms.
* @todo More Admin Settings.
* @todo Nodes linking to me.
* @todo Do more Documentation.
* @todo Add Filter and Template Tag for including Topic information into Text-Body. 
*       See: http://konnexus.net/stories/artikellayout-mit-integrierten-topics
* @todo Remove all non-hook, non-theme functions from the file.
*
*/

/**
* History
*
* 2010 01 10 [ben]: Bugfix. Removed absolute path form the JS. 
* 2010 01 09 [ben]: Removed _semanticweblog_taxonomy_term_page()
* 2010 01 09 [fym]: Added warning on Association page, when no Association Type exists
* 2010 01 09 [fym]: Added options for Display of Associations on the topic page (ordered and unordered lists)
* 2010 01 07 [fym]: Added option for Display of Associations on the topic page - before or after the listed nodes
* 2010 01 06 [ben]: Added a basic option for Display of Associations on the topic page.
* 2010 01 05 [fym]: Added blank de.po for translation
* 2010 01 03 [ben]: Added some Documentation and some refactoring
* 2010 01 03 [ben]: Added first Output of Associations on the taxonomy/term pages.
* 2010 01 03 [ben]: Minor Refactoring in the semanticweblog.association.inc
* 2009 12 30 [ben]: Added API File for all non-hook, non-theme functions to be used outside of the module
* 2009 12 21 [ben]: Added deletion of Associations when a term is deleted
* 2009 12 21 [ben]: Added Bulk Block Creation for Association Creation
* 2009 12 20 [ben]: Chache semanticweblog_load_all_types() DB-Request
* 2009 12 20 [ben]: Added name2id function for Association Types
* 2009 12 20 [ben]: Added Sentence for Association Types
* 2009 12 19 [ben]: Added Pager on Association Administer Page
* 2009 12 19 [ben]: Renamed the form elementes of the two association creation forms
* 2009 12 19 [ben]: Added Delete function for Associations.
* 2009 12 19 [ben]: Added double Association prevention
* 2009 12 18 [ben]: Added Ajax Block for Association Creation
* 2009 12 14 [ben]: Added Module Settings
* 2009 12 13 [ben]: Added new Association Type Creations, Editing, Deleting
* 2009 11 22 [ben]: Added local tasks to terms page (from old module)
* 2009 11 22 [ben]: Added Nodes' Terms Block (from old module)
* 2009 11 22 [ben]: Added Register (from old module)
* 2009 11 22 [ben]: Recreated this Module
*
*/

/**
* About the use of this module
*
* There are some basic Arrays, which a used as parameter for several functions
*
* #1 raw_associations
*
* This array is a direkt output of one row from the semanticweblog_association table.
*
* $raw_associations[$aid]["aid"] = ID of the Association
* $raw_associations[$aid]["uid"] = ID of the user who created it
* $raw_associations[$aid]["member1tid"] = ID of the first (downward) Term
* $raw_associations[$aid]["atid"] = ID of the Association Type
* $raw_associations[$aid]["member2tid"] = ID of the second (upward) Term
* $raw_associations[$aid]["created"] = TIMESTAMP of the date the association was created
*
* # 2 rich_associations
*
* This is a more complex Array, containing the Names of the Terms and Association Types
*
* // The type of this Association
* $rich_associations[$aid]["type"]["atid"] = ID of the Association Type
* $rich_associations[$aid]["type"]["name"] = Name of the Association Type
* $rich_associations[$aid]["type"]["sentence"] = Sentence Version of the Association Type
* $rich_associations[$aid]["type"]["role1"] = First Role of the Association Type
* $rich_associations[$aid]["type"]["role2"] = Second of the Association Type
* // The first member of this Associattion
* $rich_associations[$aid]["member1"]["tid"] = ID of the first (downward) Term
* $rich_associations[$aid]["member1"]["name"] = Name of the first (downward) Term
* $rich_associations[$aid]["member1"]["role"] = Role of the first (downward) Term
* // The second memeber of this Association
* $rich_associations[$aid]["member2"]["tid"] = ID of the second (upward) Term
* $rich_associations[$aid]["member2"]["name"] = Name of the second (upward) Term
* $rich_associations[$aid]["member2"]["role"] = Role of the second (upward) Term
* 
* 
*
*/



// To rebuild the menu and the theme registry during development
// menu_rebuild();
// drupal_rebuild_theme_registry();

// Including non-regular Files
include("semanticweblog.types.inc");
include("semanticweblog.associations.inc");
include("semanticweblog.api.inc");

// Global Variable
global $semanticweblog_association_types;

// Add CSS
drupal_add_js(drupal_get_path('module', 'semanticweblog') . '/semanticweblog.js');

/**
* Implementation of hook_perm
*
* @author Benjamin Birkenhake <benjamin@birkenhake.org>
*
*/
function semanticweblog_perm() {
  return array('access semanticweblog', 'administer semanticweblog');
}

/**
* Implementation of hook_menu
*
* @author Benjamin Birkenhake <benjamin@birkenhake.org>
*
*/
function semanticweblog_menu() {
  $items = array();

  // Modules Settings
  $items['admin/settings/semanticweblog'] = array(
    'title' => 'Semantic Weblog',
    'description' => 'Several Settings for your Semantic Weblog',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('semanticweblog_admin_settings'),
    'access arguments' => array('administer semanticweblog'),
    'menu_name' => 'Semantic Weblog',
  );

  // Menu Items for the Register
  $items['register/%/%'] = array(
    'title' => 'Register',
    'description' => 'The Register of a single Vocabulary',
    'page arguments' => array(1,2),
    'page callback' => 'semanticweblog_register_vocabulary',
    'access arguments' => array('access semanticweblog'),
    'file' => 'semanticweblog.pages.inc',
  );

  $items['register/%'] = array(
    'title' => 'Register',
    'description' => 'The Register of a single Vocabulary',
    'page arguments' => array(1),
    'page callback' => 'semanticweblog_register_vocabulary',
    'access arguments' => array('access semanticweblog'),
    'file' => 'semanticweblog.pages.inc',
  );

  $items['register'] = array(
    'title' => 'Register',
    'description' => 'The Register of a single Vocabulary',
    'page callback' => 'semanticweblog_register_vocabulary',
    'access arguments' => array('access semanticweblog'),
    'file' => 'semanticweblog.pages.inc',
  );

  // Menu Items for Local Term Tasks
  $items['taxonomy/term/%/edit'] = array(
    'title' => 'Edit',
    'description' => 'Edit this Term',
    'access arguments' => array('administer taxonomy'),
    'page callback' => 'semanticweblog_term_edit',
    'type' => MENU_LOCAL_TASK,
  );

  $items['taxonomy/term/%/view'] = array(
    'title' => 'View',
    'description' => 'View this Term',
    'access arguments' => array('access taxonomy'),
    'page callback' => 'semanticweblog_term_view',
    'type' => MENU_LOCAL_TASK,
  );


  // Menu Items for Association Types
  $items['admin/content/associationtype'] = array(
    'title' => 'Association Types',
    'description' => 'Add, edit and delete Association Types',
    'page callback' => 'semanticweblog_administer_associationtypes',
    'access arguments' => array('administer semanticweblog'),
    'file' => 'semanticweblog.pages.inc',
  );

  $items['admin/content/associationtype/%/edit'] = array(
    'title' => 'Association Types',
    'page arguments' => array(3),
    'description' => 'Edit an Association Type',
    'page callback' => 'semanticweblog_administer_associationtypes_edit',
    'access arguments' => array('administer semanticweblog'),
    'file' => 'semanticweblog.pages.inc',
  );

  $items['admin/content/associationtype/%/delete'] = array(
    'title' => 'Association Types',
    'page arguments' => array(3),
    'description' => 'Delete an Association Type',
    'page callback' => 'semanticweblog_administer_associationtypes_delete',
    'access arguments' => array('administer semanticweblog'),
    'file' => 'semanticweblog.pages.inc',
  );

  // Menu Items for Associations
  $items['admin/content/association'] = array(
    'title' => 'Associations',
    'description' => 'Add, edit and delete Associations',
    'page callback' => 'semanticweblog_administer_associations',
    'access arguments' => array('administer semanticweblog'),
    'file' => 'semanticweblog.pages.inc',
  );

  $items['admin/content/association/%/delete'] = array(
    'title' => 'Associations',
    'description' => 'Delete an Associations',
    'page arguments' => array(3),
    'page callback' => 'semanticweblog_administer_associations_delete',
    'access arguments' => array('administer semanticweblog'),
    'file' => 'semanticweblog.pages.inc',
  );

  $items['association/add/%/%/%'] = array(
    'title' => 'Associations',
     'page arguments' => array(2,3,4),
    'description' => 'Add an Association',
    'page callback' => 'semanticweblog_add_add_association',
    'access arguments' => array('administer semanticweblog'),
    'file' => 'semanticweblog.pages.inc',
  );
  return $items;
}

/**
* Implementation of hook_admin_settings
*
* @author Benjamin Birkenhake <benjamin@birkenhake.org>
*
*/
function semanticweblog_admin_settings() {
  $form["semanticweblog"] = array();
  $vocabs = taxonomy_get_vocabularies();
  //dprint_r($vocabs);
  foreach ($vocabs as $voc) {
    $option = array();
    $options[$voc->vid] = $voc->name;
  }
  $form['semanticweblog']['semanticweblog_lexicon'] = array('#type' => 'select',
    '#title' => t('Lexicon Vocabulary'),
    '#default_value' => variable_get('semanticweblog_lexicon', ""),
    '#size' => 1,
    '#description' => t('Which Vocabulary shall be your Lexicon?'),
    '#options' => $options,
  );
  $pager_options = array(
    '10' => '10',
    '20' => '20',
    '50' => '50',
    '100' => '100',
    'All' => 'All',
    );
  $form['semanticweblog']['semanticweblog_admin_associations_pager'] = array('#type' => 'select',
    '#title' => t('No. of Assciations per Page'),
    '#default_value' => variable_get('semanticweblog_admin_associations_pager', "10"),
    '#size' => 1,
    '#description' => t('The Number of Associations per Page on the Association Admin Page'),
    '#options' => $pager_options,
  );
  $form['semanticweblog']['semanticweblog_bulk_separator'] = array('#type' => 'textfield',
    '#title' => t('Separator for Bulk-Uploads'),
    '#default_value' => variable_get('semanticweblog_bulk_separator', "#"),
    '#size' => 30,
    '#description' => t('The Separator for you natural language bulk upload of Associations'),
  );
  $position_options = array(
  	'before' => 'Before nodes',
  	'after' => 'After nodes',
  	);
  $form['semanticweblog']['semanticweblog_admin_associations_position'] = array('#type' => 'select',
    '#title' => t('Position of Associations'),
    '#default_value' => variable_get('semanticweblog_admin_associations_position', "before"),
    '#size' => 1,
    '#description' => t('Position of Associations relative to listed nodes'),
    '#options' => $position_options,
  );
  
  $display_options = array(
    'not' => 'No Associations at all',
    'plain' => 'A Plain List of all Associated Terms', 
    'unorderedlist' => 'Unordered list (ul) of all Associated Terms',
    'orderedlist' => 'Ordered list (ol) of all Associated Terms',
    );
  $form['semanticweblog']['semanticweblog_admin_associations_display'] = array('#type' => 'select',
    '#title' => t('Type of Display'),
    '#default_value' => variable_get('semanticweblog_admin_associations_display', "plain"),
    '#size' => 1,
    '#description' => t('Type of Display of the associations on the Term pages'),
    '#options' => $display_options,
  );
  
  return system_settings_form($form);
}

/**
* Implementation of hook_block
*
* @author Benjamin Birkenhake <benjamin@birkenhake.org>
*
*/
function semanticweblog_block($op = 'list', $delta = 0, $edit = array()) {
  if ($op == 'list') {
    $blocks[0] = array(
      'info' => t('Semantic Weblog: Nodes Terms'),
    );
    $blocks[1] = array(
      'info' => t('Semantic Weblog: Create Association Ajax'),
    );
    $blocks[2] = array(
      'info' => t('Semantic Weblog: Create Association Bulk'),
    );
    return $blocks;
  }

  else if ($op == 'configure' && $delta == 0) {
  }

  else if ($op == 'save' && $delta == 0) {
  }

  else if ($op == 'view') {
    switch ($delta) {
      case 0:
        $content = semanticweblog_block_nodesterms();
        //drupal_set_message("Content:".$content.":");
        if ($content) {
          $block = array(
          'subject' => t('Node Terms'),
          'content' => semanticweblog_block_nodesterms(),
          );
        }
        else{
          return null;
        }
      break;

      case 1:
        $block = array(
          'subject' => t('Create an Association'),
          'content' => semanticweblog_block_add_association_ajax(),
          );
      break;

      case 2:
        $block = array(
          'subject' => t('Create multiple Associations'),
          'content' => semanticweblog_block_add_association_bulk(),
          );
      break;


    }
    return $block;
  }
}
/**
* Delovers a block with the terms of a node
*
* @author Benjamin Birkenhake <benjamin@birkenhake.org>
*
*/
function semanticweblog_block_nodesterms() {
  if (arg(0) == 'node') {
    if (is_numeric(arg(1))) {
      $node = node_load(arg(1));
      //dprint_r($node);
    }
  }
  return $node ? theme("semanticweblog_nodesterms_block", $node) : NULL;
}

/**
* Additional Lokal Task "View" for Terms
*
* @author Benjamin Birkenhake <benjamin@birkenhake.org>
*
*/
function semanticweblog_term_view() {
  drupal_goto("taxonomy/term/" . arg(2));
}

/**
* Additional Lokal Task "Edit" for Terms
*
* @author Benjamin Birkenhake <benjamin@birkenhake.org>
*
*/
function semanticweblog_term_edit() {
  drupal_goto("admin/content/taxonomy/edit/term/" . arg(2));
}

/**
* Implementation of hook_form_alter
*
* To position the taxonomy
*
* @author Benjamin Birkenhake <benjamin@birkenhake.org>
*
*/
function semanticweblog_form_alter(&$form, $form_state, $form_id) {
  $form['taxonomy']['#weight'] = 1;
  return $form;
}

/**
* Add additional semantic Information to the Head
*
* @author Benjamin Birkenhake <benjamin@birkenhake.org>
*
*/
function semanticweblog_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  if ($op=="view") {
    semanticweblog_extend_head();
  }
}

/**
* Add Terms as keywords to the head
*
* @author Benjamin Birkenhake <benjamin@birkenhake.org>
*
*/
function semanticweblog_extend_head() {
  if (arg(0) == 'node') {
    if (is_numeric(arg(1))) {
      $node = node_load(arg(1));
      if (is_array($node->taxonomy)) {
        $terms = array();
        foreach ($node->taxonomy as $term) {
          $terms[] = $term->name;
        }
        drupal_set_html_head('  <meta name="keywords" content="' . implode(", ", $terms) . '" />');
      }
    }
  }
}


/**
 * Implementation of hook_taxonomy
 *
 * We have to delete all Associations if a term is beeing deleted
 */
function semanticweblog_taxonomy($op, $type, $array = NULL){
  //dprint_r($array);
  $termid = $array["tid"];
  if($op=="delete" and $type=="term" and is_numeric($termid)){
   db_query("DELETE FROM {semanticweblog_associations} WHERE member1tid = %d or member2tid = %d", $termid, $termid);
   drupal_set_message(t('All Associations of the term have been deleted.'));
  }
}

// Theming


/**
* Implementation of hook_theme
*
* @author Benjamin Birkenhake <benjamin@birkenhake.org>
*
*/
function semanticweblog_theme() {
  return array(
  // The hook or form id in this case.
  'taxonomy_term_page' => array(
  // Default arguments.
  'arguments' => array('tids' => NULL, 'result' => NULL),
  'function' => "semanticweblog_taxonomy_term_page",
  ),
  'semanticweblog_nodesterms_block' => array(
  'arguments' => array('node' => NULL),
  ),
  'semanticweblog_register_vocabulary' => array(
  'arguments' => array('terms' => array(), 'letter' => NULL),
  ),
  'semanticweblog_register_alphabet' => array(
  'arguments' => array('vid' => NULL, 'letter' => NULL),
  ),
  );
}



/**
* Render a taxonomy term page HTML output.
*
* This function adds an link to edit the term, if access to taxonomy management is given.
*
* @param $tids
*   An array of term ids.
* @param $result
*   A pager_query() result, such as that performed by taxonomy_select_nodes().
*/
function semanticweblog_taxonomy_term_page($tids, $result) {
  drupal_add_css(drupal_get_path('module', 'semanticweblog') . '/semanticweblog.css');
  $association_output = '';

  // Only display the description if we have a single term, to avoid clutter and confusion.
  if (count($tids) == 1) {
    $term = taxonomy_get_term($tids[0]);
    // Add Keywords to the header.
    drupal_set_html_head('  <meta name="keywords" content="' . $term->name  .'" />');
    
    // Add Description
    $association_output .= '<div class="taxonomy-term-description">';
    $association_output .= filter_xss_admin($term->description);
    $association_output .= '</div>';
    
    // Add Associations depending on the Settings.
    // To Add more options here, do this: 
    // 1. Add an Option in the semanticweblog_admin_settings() to the $display_options
    // 2. Add a funciton semanticweblog_theme_term_page_associations_yourdisplaytype($term)
    // 3. Add a case in this switch here.
    $associations = semanticweblog_api_term_get_all_associations($term->tid);  
    switch(variable_get('semanticweblog_admin_associations_display', "plain")){
      case "plain":
        $association_output .= semanticweblog_theme_term_page_associations_plainlist($term, $associations);
        break;
      case "unorderedlist":
      	$association_output .= semanticweblog_theme_term_page_associations_lists($term, $associations, 'unordered');
      	break;
      case "orderedlist":
      	$association_output .= semanticweblog_theme_term_page_associations_lists($term, $associations, 'ordered');
      	break;
      case "not":
        break;
    }
    
    
    // A Title for the Nodes
    $nodetitle = '<h2 class="taxonomy-term-content-title">' . t('Content on the Topic') . '</h2>';
  }

	switch(variable_get('semanticweblog_admin_associations_position', "before")){
      case "before":
        $output = $association_output . $nodetitle . taxonomy_render_nodes($result);
        break;
      case "after":
      	$output .= $nodetitle . taxonomy_render_nodes($result) . $association_output;
        break;
    }
  return $output;
}

function semanticweblog_theme_term_page_associations_plainlist($term, $associations){
  $output  = "<div id=\"term-page-associations\">\n";
  $output .= '<h2 class="taxonomy-term-assciation-title">' . t('Associations of this Term') . '</h2>';
  $output .= '<div class="taxonomy-term-associations associations-plainlist">';      
  if(count($associations)>0){
  	foreach ($associations as $assoc) {
      $output .= "<p>". l($assoc["member1"]["name"], "taxonomy/term/" . $assoc["member1"]["tid"]) . ' ' .  $assoc["type"]["sentence"] . ' ' .  l($assoc["member2"]["name"], "taxonomy/term/" . $assoc["member2"]["tid"]). "</p>\n";       
    }
  }else{
  	$output .= t('This Term has no Associations yet.');
  }   
  $output .= "</div>\n";
  $output .= "</div>\n";
  return $output;
}


function semanticweblog_theme_term_page_associations_lists($term, $associations, $mode){
	switch($mode) {
		case "unordered":
		$listtype = "ul";
			break;
		case "ordered":
		$listtype = "ol";
			break; 
	}
  $output  = "<div id=\"term-page-associations\">\n";
  $output .= "<h2 class=\"taxonomy-term-assciation-title\">" . t('Associations of this Term') . "</h2>\n";
  $output .= "<div class=\"taxonomy-term-associations associations-".$mode."list\">\n";      
  if(count($associations)>0){
  	$output .= "<".$listtype.">\n";
  	foreach ($associations as $assoc) {
      $output .= "<li>". l($assoc["member1"]["name"], "taxonomy/term/" . $assoc["member1"]["tid"]) . ' ' .  $assoc["type"]["sentence"] . ' ' .  l($assoc["member2"]["name"], "taxonomy/term/" . $assoc["member2"]["tid"]). "</li>\n";       
    }
    $output .= "</".$listtype.">\n";
  }else{
  	$output .= t('This Term has no Associations yet.');
  }   
  $output .= "</div>\n";
  $output .= "</div>\n";
  return $output;
}




/**
* This functions searches for Links between Nodes
*/
function semanticweblog_nodes_linking_to_me($node) {

}




/**
* This function thmes a Block which contains all Terms of one Node
*
* @param object $node
* @return string html-output
*/
function theme_semanticweblog_nodesterms_block($node) {
  //drupal_set_message("theme block");
  if (is_array($node->taxonomy) and count($node->taxonomy)>0) {
    foreach ($node->taxonomy as $term) {
      $item["data"] = l($term->name,"taxonomy/term/" . $term->tid, array('absolute' => true));
      $items[] = $item;
    }
    $output = theme_item_list($items);
  }
  else{
    $output = NULL;
  }
  //dprint($items);

  return $output;
}


